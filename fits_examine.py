###Creates a file of the masked regions in the fits file as well as finding the x,y
### CCD length
from astropy.io import fits
import numpy as np
import sys 
import astropy.wcs as wcs
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

if len(sys.argv)!=2:
	file=raw_input('Input file: ')
else: file=sys.argv[1]

hdulist=fits.open(file,ignore_missing_end=True)
####Taking the file size and putting it into a file
xaxis=int(hdulist[0].header['NAXIS1'])+1
yaxis=int(hdulist[0].header['NAXIS2'])+1


f=open('CCD_axes.txt','w+')
print >> f,'#How big the image is on the x and y axis of the CCD'
print >> f,'#image file used: {0:87s}'.format(file)
print >> f,'#File generated by fits_examine.py'
print >> f,'{0:5d}	{1:5d}'.format(xaxis-1,yaxis-1)
f.close()

###Taking the image as a 2d array and finding the masked pixels (zeros)
data=hdulist[0].data
data=data.T
h=np.where(data <= 10)


masked_pixels=np.stack(h,1) ###Creates a matrix of the x,y coordinates of the masked 
							###regions. Matrix looks like ....
							####[[   0    0]
 							#### [   0    1]
 							#### [   0    2]
 							####  ..., 
  							#### [8609 8680]
 							#### [8609 8681]
 							#### [8609 8682]]
if masked_pixels.size==0:
	print 'No masking in this image, so no masked file was made.'
	sys.exit()
## Masked_pixels gives me each individual pixel that is masked. Really inefficient
## to use if I'm generating a lot of data and then have to compare it to each pixel.
## This next section will define the pixels that are adjacent to each other in rows
## as an area. That way I only need to know the pixel that the masked section starts
## and ends at for each row.

mask_array=[]
mask_array.append(masked_pixels[0])
for i in xrange(len(masked_pixels[:,0])):
	if i!=(len(masked_pixels[:,0])-1):
		if masked_pixels[i,0]!=masked_pixels[i+1,0] or \
		masked_pixels[i+1,1]!=(masked_pixels[i,1]+1): 
			mask_array.append(masked_pixels[i])
			mask_array.append(masked_pixels[i+1])
	else: mask_array.append(masked_pixels[i])
mask_array=np.array(mask_array)	

####Picture example:
#		(1)		(2)		(3)		(4)		(5)		(6)
#	----------------------------------------------------
#	|xxxxxxx|xxxxxxx|xxxxxxx|xxxxxxx|		|		|	
#	|xxxxxxx|xxxxxxx|xxxxxxx|xxxxxxx|		|		|
#	|xxxxxxx|xxxxxxx|xxxxxxx|xxxxxxx|		|		|
#	----------------------------------------------------
# Masked_pixels says that pixels 1,2,3, and 4 are all masked, but I can trim down the 
# number of points that it has to tell me by saying that there is a row of masked pixels
# starting from pixel 1 and ending at pixel 4. This SHOULD speed up the generator code
# significantly if it only has to compare between areas.

vector_list={}
for i in xrange(xaxis):
	h=np.where(mask_array[:,0]==i)
	vector_list[i]=mask_array[h,1]

f=open('generalized_masked_pixels.txt','w+')
print >> f,'#This file contains the beginning and end points for rows of pixels that'
print >> f,'#are masked in the current fits file. File created by fits_examine.py'

for i in xrange(xaxis):
	print >> f,vector_list[i]
	
f.close()

